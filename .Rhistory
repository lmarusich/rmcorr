args
rmcorr(Subject, PacO2, pH, bland1995)
args
as.character(args)
b <- as.character(args)
b <- as.character(args[[1]])
b <- lapply(args, as.character)
warnings()
b
args
b
eval(b$participant, dataset, parent.frame())
library(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995)
bland1995mod <- bland1995
bland1995mod[1,1] <- "a"
bland1995mod
rmcorr(Subject, PacO2, pH, bland1995mod)
bland1995mod[2,1] <- "a"
rmcorr(Subject, PacO2, pH, bland1995mod)
bland1995mod
bland1995mod[1:4,1] <- "a"
rmcorr(Subject, PacO2, pH, bland1995mod)
colnames_test <- c("Subject", "PacO2", "pH", "bland1995mod")
rmcorr(colnames_test[1], colnames_test[2], colnames_test[3], colnames_test[4])
rmcorr("Subject", "PacO2", "pH", bland1995mod)
rmcorr("Subject", "PacO2", "pH", "bland1995mod")
colnames(bland1995)
rmcorr(colnames(bland1995)[1], colnames(bland1995)[2], colnames(bland1995)[3], bland1995)
colnames(bland1995)[1]
debug(rmcorr)
rmcorr(colnames(bland1995)[1], colnames(bland1995)[2], colnames(bland1995)[3], bland1995)
args
rmcorr(Subject, PacO2, pH, bland1995mod)
args
eval(args$participant, dataset, parent.frame())
a <- eval(args$participant, dataset, parent.frame())
class(a)
length(a)
rmcorr("Subject", "PacO2", "pH", "bland1995mod")
args
a <- eval(args$participant, dataset, parent.frame())
eval(args$participant, dataset, parent.frame())
args
dataset
parent.frame()
args
rmcorr("Subject", "PacO2", "pH", "bland1995mod")
undebug(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995mod)
debug(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995mod)
args
args
Participant
dataset
rmcorr("Subject", "PacO2", "pH", bland1995mod)
args
a <-
eval(args$participant, dataset, parent.frame())
a
class(a)
length(a)
library(rmcorr)
rmcorr("Subject", "PacO2", "pH", bland1995mod)
rmcorr(Subject, PacO2, pH, bland1995mod)
rmcorr(colnames(bland1995)[1], colnames(bland1995)[2], colnames(bland1995)[3], bland1995)
rmcorr(colnames_test[1], colnames_test[2], colnames_test[3], colnames_test[4])
rmcorr(colnames_test[1], colnames_test[2], colnames_test[3], bland1995)
usethis::use_testthat()
use_test()
library(testthat)
use_test()
library(usethis)
use_test()
use_test()
devtools::test()
devtools::test()
?expect
?rmcorr
rmcorr(Subject, PacO2, pH, bland1995)
devtools::test()
devtools::test()
?context
?expect_equal
?expect_equal
devtools::test()
?expect_warning
devtools::test()
devtools::test()
devtools::test()
devtools::test()
bland1995
rmc.out
rmcorr(Subject, PacO2, pH, bland1995)
a <- rmcorr(Subject, PacO2, pH, bland1995)
a$CI
b <- a$CI
devtools::test()
?expect_warning
devtools::test()
rmcorr(as.factor(Subject), PacO2, pH, bland1995mod)
devtools::test()
rmcorr(Subject, as.character(PacO2), pH, bland1995)
bland1995
bland1995a <- bland1995
bland1995a$pH <- as.character(bland1995a$pH)
bland1995a
str(bland1995a)
rmcorr(Subject, PacO2, pH, bland1995a)
debug(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995a)
Measure1
args
Measure2
class(Measure2)
library(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995a)
devtools::test()
?rmcorr
?gilden2010
rmcorr(sub, rt, acc, gilden2010, CIs = "bootstrap")
rmc.out <- rmcorr(sub, rt, acc, gilden2010, CIs = "bootstrap")
rmc.out
rmc.out$CI
rmc.out$CI[1]
str(rmc.out$CI.level)
str(rmc.out$CI)
str(rmc.out$CI[1])
str(rmc.out$CI[[1]])
set.seed(1212)
devtools::release()
check_rhub()
?devtools
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages(c("ade4", "afex", "arm", "backports", "bayestestR", "bbmle", "BDgraph", "beeswarm", "berryFunctions", "BiocManager", "bitops", "blob", "bookdown", "bootnet", "brio", "broom", "broom.mixed", "bslib", "cachem", "callr", "candisc", "car", "colorspace", "conquer", "corpcor", "correlation", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "dbplyr", "desc", "diffobj", "digest", "dplyr", "DT", "e1071", "effectsize", "ellipsis", "emmeans", "fansi", "fdrtool", "forecast", "fs", "gargle", "generics", "gert", "ggeffects", "ggplot2", "ggplotify", "ggsignif", "gh", "git2r", "glmmTMB", "glmnet", "glue", "gmailr", "graphicalVAR", "graphlayouts", "greybox", "gsl", "gtools", "haven", "heplots", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "igraph", "insight", "irrNA", "isoband", "jpeg", "jquerylib", "knitr", "lamW", "later", "lavaan", "lcc", "lifecycle", "lme4", "lmtest", "lubridate", "maps", "maptools", "matrixcalc", "matrixStats", "MBESS", "memoise", "MetaUtility", "mgm", "mice", "mime", "multcomp", "mvtnorm", "NetworkToolbox", "networktools", "ngram", "nloptr", "OpenMx", "openssl", "openxlsx", "optimx", "packrat", "pals", "pander", "parameters", "parsedate", "pbapply", "performance", "piggyback", "pillar", "pivottabler", "pkgbuild", "plotly", "plotrix", "processx", "proxy", "psych", "psychTools", "qgraph", "qs", "quantreg", "R.utils", "raster", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "readr", "relaimpo", "renv", "reprex", "rex", "rio", "rlang", "rmarkdown", "rngtools", "robustbase", "robustlmm", "roxygen2", "rpf", "rsconnect", "RSQLite", "rticles", "rvcheck", "rversions", "rvest", "sandwich", "sass", "scholar", "sem", "semTools", "sessioninfo", "shiny", "shinydashboard", "shinytest", "shinyWidgets", "sjlabelled", "sjmisc", "sjPlot", "slam", "smacof", "smooth", "snow", "sp", "statmod", "stringdist", "stringfish", "stringi", "survey", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tis", "TMB", "tseries", "unmarked", "usethis", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "waldo", "weights", "withr", "xfun", "XML", "xml2", "zip"))
install.packages(c("ade4", "afex", "arm", "backports", "bayestestR", "bbmle", "BDgraph", "beeswarm", "berryFunctions", "BiocManager", "bitops", "blob", "bookdown", "bootnet", "brio", "broom", "broom.mixed", "bslib", "cachem", "callr", "candisc", "car", "colorspace", "conquer", "corpcor", "correlation", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "dbplyr", "desc", "diffobj", "digest", "dplyr", "DT", "e1071", "effectsize", "ellipsis", "emmeans", "fansi", "fdrtool", "forecast", "fs", "gargle", "generics", "gert", "ggeffects", "ggplot2", "ggplotify", "ggsignif", "gh", "git2r", "glmmTMB", "glmnet", "glue", "gmailr", "graphicalVAR", "graphlayouts", "greybox", "gsl", "gtools", "haven", "heplots", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "igraph", "insight", "irrNA", "isoband", "jpeg", "jquerylib", "knitr", "lamW", "later", "lavaan", "lcc", "lifecycle", "lme4", "lmtest", "lubridate", "maps", "maptools", "matrixcalc", "matrixStats", "MBESS", "memoise", "MetaUtility", "mgm", "mice", "mime", "multcomp", "mvtnorm", "NetworkToolbox", "networktools", "ngram", "nloptr", "OpenMx", "openssl", "openxlsx", "optimx", "packrat", "pals", "pander", "parameters", "parsedate", "pbapply", "performance", "piggyback", "pillar", "pivottabler", "pkgbuild", "plotly", "plotrix", "processx", "proxy", "psych", "psychTools", "qgraph", "qs", "quantreg", "R.utils", "raster", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "readr", "relaimpo", "renv", "reprex", "rex", "rio", "rlang", "rmarkdown", "rngtools", "robustbase", "robustlmm", "roxygen2", "rpf", "rsconnect", "RSQLite", "rticles", "rvcheck", "rversions", "rvest", "sandwich", "sass", "scholar", "sem", "semTools", "sessioninfo", "shiny", "shinydashboard", "shinytest", "shinyWidgets", "sjlabelled", "sjmisc", "sjPlot", "slam", "smacof", "smooth", "snow", "sp", "statmod", "stringdist", "stringfish", "stringi", "survey", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tis", "TMB", "tseries", "unmarked", "usethis", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "waldo", "weights", "withr", "xfun", "XML", "xml2", "zip"))
install.packages(c("ade4", "afex", "arm", "backports", "bayestestR", "bbmle", "BDgraph", "beeswarm", "berryFunctions", "BiocManager", "bitops", "blob", "bookdown", "bootnet", "brio", "broom", "broom.mixed", "bslib", "cachem", "callr", "candisc", "car", "colorspace", "conquer", "corpcor", "correlation", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "dbplyr", "desc", "diffobj", "digest", "dplyr", "DT", "e1071", "effectsize", "ellipsis", "emmeans", "fansi", "fdrtool", "forecast", "fs", "gargle", "generics", "gert", "ggeffects", "ggplot2", "ggplotify", "ggsignif", "gh", "git2r", "glmmTMB", "glmnet", "glue", "gmailr", "graphicalVAR", "graphlayouts", "greybox", "gsl", "gtools", "haven", "heplots", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "igraph", "insight", "irrNA", "isoband", "jpeg", "jquerylib", "knitr", "lamW", "later", "lavaan", "lcc", "lifecycle", "lme4", "lmtest", "lubridate", "maps", "maptools", "matrixcalc", "matrixStats", "MBESS", "memoise", "MetaUtility", "mgm", "mice", "mime", "multcomp", "mvtnorm", "NetworkToolbox", "networktools", "ngram", "nloptr", "OpenMx", "openssl", "openxlsx", "optimx", "packrat", "pals", "pander", "parameters", "parsedate", "pbapply", "performance", "piggyback", "pillar", "pivottabler", "pkgbuild", "plotly", "plotrix", "processx", "proxy", "psych", "psychTools", "qgraph", "qs", "quantreg", "R.utils", "raster", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "readr", "relaimpo", "renv", "reprex", "rex", "rio", "rlang", "rmarkdown", "rngtools", "robustbase", "robustlmm", "roxygen2", "rpf", "rsconnect", "RSQLite", "rticles", "rvcheck", "rversions", "rvest", "sandwich", "sass", "scholar", "sem", "semTools", "sessioninfo", "shiny", "shinydashboard", "shinytest", "shinyWidgets", "sjlabelled", "sjmisc", "sjPlot", "slam", "smacof", "smooth", "snow", "sp", "statmod", "stringdist", "stringfish", "stringi", "survey", "systemfonts", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tis", "TMB", "tseries", "unmarked", "usethis", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "waldo", "weights", "withr", "xfun", "XML", "xml2", "zip"))
install.packages(c("lme4", "nloptr", "Rcpp", "statmod"))
install.packages(c("lme4", "nloptr", "Rcpp", "statmod"))
install.packages("lme4")
install.packages('lme4')
library(rmcorr)
devtools::check_rhub()
devtools::release()
devtools::check_win_devel()
devtools::release()
install.packages('rmcorr')
install.packages("rmcorr")
install.packages("rmcorr")
library(devtools)
detach("package:devtools", unload = TRUE)
install.packages('devtools')
library(devtools)
?check
run_examples()
Sys.setenv(_R_CHECK_DEPENDS_ONLY_=true)
?Sys.setenv
usethis::edit_r_environ()
usethis::edit_r_environ('rmcorr')
usethis::edit_r_environ('rmcorr.Rproj')
?edit_r_environ
usethis::edit_r_environ('project')
warnings()
library(rmarkdown)
library(rmcorr)
devtools::release_checks()
devtools::release_checks()
devtools::release_checks()
devtools::release()
check_rhub()
devtools::check_rhub()
devtools::check_rhub()
library(rmcorr)
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::release()
check_win_devel()
devtools::check_win_devel()
?class
a <- "a"
a
class(a)
isa(a, "character")
debug(rmcorr)
library(rmcorr)
debug(rmcorr)
?rmcorr
rmcorr(Subject, PacO2, pH, bland1995)
class(Participant)
isa(Participant, "character")
isa(Participant, "character")
rmcorr("Subject", PacO2, pH, bland1995)
isa(Participant, "character")
Participant
undebug(rmcorr)
rmcorr("Subject", "PacO2", pH, bland1995)
rmcorr(Subject, PacO2, pH, bland1995)
library(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995)
rmcorr("Subject", "PacO2", pH, bland1995)
?isa
devtools::check_win_devel()
devtools::release()
rhub::check(platform = "debian-clang-devel")
?check
rhub::platforms()
rhub::check(platform = "debian-gcc-devel")
requireNamespace("AICcmodavg", quietly = TRUE)
requireNamespace("AICcmodavg")
?requireNamespace
?aictab
requireNamespace("AICcmodavga")
requireNamespace("AICcmodavga", quietly = TRUE)
if(requireNamespace("AICcmodavga", quietly = TRUE))
a = "hi"
a
if(requireNamespace("AICcmodavga", quietly = TRUE)){a = "hi"}
a
if(requireNamespace("AICcmodavg", quietly = TRUE)){a = "hi"}
a
library(rmcorr)
library(rmcorr)
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::release()
check_rhub()
devtools::check_rhub()
devtools::release()
devtools::check_win_devel()
devtools::release()
devtools::release()
devtools::check_win_devel()
getwd()
?escalc
library(metafor)
?escalc
?dat.molloy2014
?forest
devtools::release()
usethis::use_pkgdown()
pkgdown::build_site()
devtools::build_readme()
pkgdown::build_site()
devtools::build_readme()
pkgdown::build_site()
?person
pkgdown::build_site()
?use_pkgdown_github_pages
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
View(a1.lm)
View(a1.rtest)
View(a2.lm)
View(a2.rtest)
rmcorr
library(rmcorr)
require(rmcorr)
rmcorr
library(rmcorr)
detach("package:rmcorr", unload = TRUE)
library(rmcorr)
detach("package:rmcorr", unload = TRUE)
library(rmcorr)
dist_rmc_mat <- rmcorr_mat(participant = Subject,
variables = c("Blindwalk.Away",
"Blindwalk.Toward",
"Triangulated.BW",
"Verbal",
"Visual.matching"),
dataset = bakdash_dist_measures,
CI.level = 0.95)
plot(dist_rmc_mat$models[[2]])
dist_rmc_mat
dist_rmc_mat$models
dist_rmc_mat$models[[1]]
dist_rmc_mat$models[[2]]
dist_rmc_mat$summary
dist_rmc_mat$matrix
require(corrplot)
corrplot(dist_rmc_mat)
corrplot(dist_rmc_mat$matrix)
corrplot(dist_rmc_mat$matrix, method = "number")
corrplot(dist_rmc_mat$matrix, method = "number")
dist_rmc_mat$summary
install.packages(c("bslib", "deSolve", "devtools", "fontawesome", "future", "ggdist", "gtools", "htmltools", "interp", "lme4", "parallelly", "pillar", "pkgdown", "quantreg", "Rcpp", "Rdpack", "rlang", "RoBMA", "roxygen2", "sass", "seriation", "shiny", "stringi", "tibble", "tidymodels", "tidyverse", "timeDate", "TSP", "workflowsets"))
install.packages(c("htmltools", "lme4", "Rcpp", "rlang", "stringi"))
require(rlang)
install.packages(c("htmltools", "lme4", "Rcpp", "rlang", "stringi"))
install.packages(c("htmltools", "lme4", "Rcpp", "rlang", "stringi"))
install.packages(c("htmltools", "lme4", "Rcpp", "rlang", "stringi"))
pkgdown::clean_site()
devtools::build_vignettes()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
options(width = 80)
library("knitr", "rmarkdown", "rmcorr")
require(knitr)
require(rmarkdown)
require(rmcorr)
#Kludge to add corrplot b/c of lib loc error
if(!require("corrplot"))
install.packages("corrplot")
require(corrplot)
#Third component: Summary
dist_rmc_mat$summary
dist_rmc_mat <- rmcorr_mat(participant = Subject,
variables = c("Blindwalk Away",
"Blindwalk Toward",
"Triangulated BW",
"Verbal",
"Visual matching"),
dataset = twedt_dist_measures,
CI.level = 0.95)
#p-values only
dist_rmc_mat$summary$p.vals
p.vals <- dist_rmc_mat$summary$p.vals
p.vals
str(p.vals)
p.adjust(p.vals,
method = c("hochberg", "bonferroni", "fdr"),
n = length(p.vals))
p.adjust(p.vals,
method = c("bonferroni"),
n = length(p.vals))
p.vals.adjusted.boferroni <- p.adjust(p.vals,
method = c("bonferroni"),
n = length(p.vals))
p.vals.adjusted.boferroni <- p.adjust(p.vals,
method = c("bonferroni"),
n = length(p.vals))
p.vals.adjusted.fdr<- p.adjust(p.vals,
method = c("fdr"),
n = length(p.vals))
p.vals.adjusted.boferroni - p.vals.adjusted.fdr
p.vals.adjusted.fdr <- p.adjust(p.vals,
method = c("fdr"),
n = length(p.vals))
#All p-values together
all.pvals <- cbind(p.vals, p.vals.adjusted.boferroni, p.vals.adjusted.fdr)
colnames(all.pvals) <- c("Unadjusted", "Bonferroni", "fdr")
all.pvals
all.pvals
round(all.pvals, digits = 3)
round(all.pvals, digits = 4)
round(all.pvals, digits = 5)
round(all.pvals, digits = 6)
#All p-values together
all.pvals <- cbind(p.vals, p.vals.bonferroni, p.vals.bonferroni)
#Vector of original, unadjusted p-values for all 10 comparisons
p.vals <- dist_rmc_mat$summary$p.vals
p.vals.bonferroni <- p.adjust(p.vals,
method = c("bonferroni"),
n = length(p.vals))
p.vals.fdr <- p.adjust(p.vals,
method = c("fdr"),
n = length(p.vals))
#All p-values together
all.pvals <- cbind(p.vals, p.vals.bonferroni, p.vals.bonferroni)
colnames(all.pvals) <- c("Unadjusted", "Bonferroni", "fdr")
round(all.pvals, digits = 10)
p.vals.bonferroni <- p.adjust(p.vals,
method = ("bonferroni"),
n = length(p.vals))
p.vals.fdr <- p.adjust(p.vals,
method = ("fdr"),
n = length(p.vals))
#All p-values together
all.pvals <- cbind(p.vals, p.vals.bonferroni, p.vals.bonferroni)
colnames(all.pvals) <- c("Unadjusted", "Bonferroni", "fdr")
round(all.pvals, digits = 10)
#All p-values together
all.pvals <- cbind(p.vals, p.vals.fdr, p.vals.bonferroni)
colnames(all.pvals) <- c("Unadjusted", "Bonferroni", "fdr")
round(all.pvals, digits = 10)
#Third component: Summary
dist_rmc_mat$summary
#p-values only
dist_rmc_mat$summary$p.vals
#Vector of original, unadjusted p-values for all 10 comparisons
p.vals <- dist_rmc_mat$summary$p.vals
p.vals.bonferroni <- p.adjust(p.vals,
method = ("bonferroni"),
n = length(p.vals))
p.vals.fdr <- p.adjust(p.vals,
method = ("fdr"),
n = length(p.vals))
#All p-values together
all.pvals <- cbind(p.vals, p.vals.bonferroni, p.vals.fdr)
colnames(all.pvals) <- c("Unadjusted", "Bonferroni", "fdr")
round(all.pvals, digits = 10)
round(all.pvals, digits = 5)
install.packages(rmcorr)
require(rmcorr)
dist_rmc_mat <- rmcorr_mat(participant = Subject,
variables = c("Blindwalk Away",
"Blindwalk Toward",
"Triangulated BW",
"Verbal",
"Visual matching"),
dataset = twedt_dist_measures,
CI.level = 0.95)
#Third component: Summary
dist_rmc_mat$summary
#p-values only
dist_rmc_mat$summary$p.vals
#Vector of original, unadjusted p-values for all 10 comparisons
p.vals <- dist_rmc_mat$summary$p.vals
p.vals.bonferroni <- p.adjust(p.vals,
method = ("bonferroni"),
n = length(p.vals))
p.vals.fdr <- p.adjust(p.vals,
method = ("fdr"),
n = length(p.vals))
#All p-values together
all.pvals <- cbind(p.vals, p.vals.bonferroni, p.vals.fdr)
colnames(all.pvals) <- c("Unadjusted", "Bonferroni", "fdr")
round(all.pvals, digits = 5)
pkgdown::clean_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, tidy = FALSE)
options(width = 80)
library("knitr", "rmarkdown", "rmcorr") #, "stats")
require(knitr)
require(rmarkdown)
require(rmcorr)
model1.bland1995 <- rmcorr(Subject, PaCO2, pH, bland1995)
model2.gilden2010 <- rmcorr(sub, rt, acc, gilden2010)
model1.bland1995
model2.gilden2010
model1.bland1995  <- rmcorr(Subject, PaCO2, pH, bland1995)
model1.bland1995  <- rmcorr(Subject, PaCO2, pH, bland1995)
model2.gilden2010 <- rmcorr(Participant, Age, Volume, raz2005)
model1.bland1995
model2.gilden2010
model1.marusich2016_exp2  <- rmcorr(Pair, HVT_capture, MARS, marusich2016_exp2)
model2.gilden2010         <- rmcorr(sub, rt, acc, gilden2010 )
model1.marusich2016_exp2
model2.gilden2010
model1.marusich2016_exp2
model2.gilden2010         <- rmcorr(sub, rt, acc, gilden2010 )
model2.gilden2010
rmcorr1 <- model1.marusich2016_exp2$r
rmcorr1 <- model1.marusich2016_exp2$r
rmcorr2 <- model2.gilden2010$r
model1.marusich2016_exp2
model2.gilden2010
rmcorr1
rmcorr2 <- model2.gilden2010$r
rmcorr2
model1.marusich2016_exp2
#Extract relevant parameters
#Model 1
rmcorr1 <- model1.marusich2016_exp2$r
rmcorr1
n1 <- model1.marusich2016_exp2$df + 2 #note the same kludge as power above
n1                                    #this is the effective sample size
#Model 2
rmcorr2 <- model2.gilden2010$r
rmcorr2
n2 <- model2.gilden2010$df + 2
n2
cocor.indep.groups(rmcorr1, rmcorr2, n1, n2)
require(cocor)
install.packages("cocor")
#2) Extract relevant parameters
#Model 1
rmcorr1 <- model1.marusich2016_exp2$r
rmcorr1
n1 <- model1.marusich2016_exp2$df + 2 #note the same kludge as power above
n1                                    #this is the effective sample size
#Model 2
rmcorr2 <- model2.gilden2010$r
rmcorr2
n2 <- model2.gilden2010$df + 2
n2
#3) at long last, compare the two rmcorr coefficients
cocor.indep.groups(rmcorr1, rmcorr2, n1, n2)
require(cocor)
#3) at long last, compare the two rmcorr coefficients
cocor.indep.groups(rmcorr1, rmcorr2, n1, n2)
#3) at long last, compare the two rmcorr coefficients
cocor.indep.groups(rmcorr1, rmcorr2, n1, n2)
#3) at long last, compare the two rmcorr coefficients
cocor.indep.groups(rmcorr1, rmcorr2, n1, n2, var.labels = c("HVT_capture",
"MARS",
"rt",
"acc"))
#3) at long last, compare the two rmcorr coefficients
cocor.indep.groups(rmcorr1, rmcorr2, n1, n2, var.labels = c("HVT_capture",
"MARS",
"rt",
"acc"))
n1                                    #this is the effective sample size
n2 <- model2.gilden2010$df + 2
n2
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
