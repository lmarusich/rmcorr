?plot
?plot.xy
mypal
mypal(10)
cols
mypal(1)
mypal(11)
cols <- c("#A6CEE3", "#9D686D", "#6A3D9A")
plot(1:3, cex = 5, pch= 16, col = cols)
mypal(3)
plot(1:3, cex = 5, pch= 16, col = mypal(3))
?bquote
bland1995
library(rmcorr)
bland1995
raz2005
gilden2010
?dev.copy
rmc
?rmcorr
rmcorr(Subject, PacO2, pH, bland1995)
rmcorr(Subject, PacO2, pH, bland1995)
library(rmcorr)
rmcorr(Subject, PacO2, pH, bland1995)
a <- rmcorr(Subject, PacO2, pH, bland1995)
a
a$model
a$model$coefficients
str(a$model$coefficients)
a$model$coefficients[["Measure1"]]
library(devtools)
updateR()
install.packages('installr')
library(installr)
updateR()
library(devtools)
install.packages('devtools')
library(devtools)
devtools::use_travis()
install.packages('roxygen2')
install.packages('pwr')
install.packages('psych')
install.packages('RColorBrewer')
library(rmcorr)
?plot
library(rmcorr)
library(rmcorr)
example(plot.rmc)
library(rmcorr)
example(plot.rmc)
?print.rmc
?plot.rmc
library(rmcorr)
example(plot.rmc)
devtools::use_build_ignore("cran-comments.md")
library(rmcorr)
browseVignettes('rmcorr')
install.packages('knitr')
library(rmcorr)
browseVignettes('rmcorr')
install.packages('rmarkdown')
library(rmcorr)
browseVignettes('rmcorr')
install.packages('plotrix')
?dev.copy
?dev.copy
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
?Sys.which
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
?lm
?predict
?coef
?drop1
library(rmcorr)
browseVignettes('rmcorr')
vignette("Paper_figures", "rmcorr")
?vignette
vignette(package = "rmcorr")
library(rmcorr)
vignette(package = "rmcorr")
library(rmcorr)
library(rmcorr)
library(rmcorr)
vignette(package = "rmcorr")
browseVignettes('rmcorr')
devtools::build_vignettes()
library(rmcorr)
browseVignettes('rmcorr')
vignette(package = "rmcorr")
?build_win
devtools::build_win(pkg = "rmcorr")
devtools::build_win()
devtools::revdep_check()
readRDS(checks.rds)
readRDS("revdep/checks.rds")
?revdeps
?revdep_check
revdep_check_print_problems()
revdep_check_save_summary(pkg = ".")
devtools::revdep_check_print_problems()
devtools::release()
devtools::release()
devtools::release()
bland1995
load(rmcorr)
library(rmcorr)
bland1995
rmcorr(bland1995)
?rmcorr
rmcorr(Subject, PacO2, pH, bland1995)
bland1995
lm(bland1995$pH ~ bland1995$PacO2 + bland1995$Subject)
test <- lm(bland1995$pH ~ bland1995$PacO2 + bland1995$Subject)
test
summary(test)
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
install.packages('MDPtoolbox')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
?aperm
?as.array
raw_request <- list(Client = "R", Mode = "Get", Function = "GetTransitionMatrix", Arguments = NULL)
#print(raw_request)
JSON_request <- toJSON(raw_request)
JSON_request
raw_request
raw_request <- list(Client = "R", Mode = "Set", Function = "SetPolicy", Arguments = NULL)
#print(raw_request)
JSON_request <- toJSON(raw_request)
JSON_request
raw_request <- list(Client = "R", Mode = "Set", Function = "SetPolicy", Arguments = argument_object)
argument_object <- toJSON(list(NumberOfRows = 1, NumberOfColumns = 1, NumberOfLayers = 1, Values = as.array(c(1,2,3,4))))
raw_request <- list(Client = "R", Mode = "Set", Function = "SetPolicy", Arguments = argument_object)
raw_request
JSON_request <- toJSON(raw_request)
JSON_request
?toJSON
x <- list( alpha = 1:5, beta = "Bravo",
gamma = list(a=1:3, b=NULL),
delta = c(TRUE, FALSE) )
close(con)
x
toJSON(x)
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
raw_request <- list(Client = "R", Mode = "Set", Function = "SetPolicy", Arguments = argument_object)
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
debugSource('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
testprobs <- c(0.8, 0.15, 0.05, 0.30, 0.5, 0.2, .7, .2, .1, .1, .2, .7, 0, .5, .5, .2, .3, .5)
length(testprobs)
as.array(testprobs)
str(testprobs)
?as.array
as.array(test.probs, c(3,3,2))
as.array(testprobs, c(3,3,2))
as.array(letters)
dim(as.array(letters))
array(testprobs, c(3,3,2))
array(testprobs, c(3,3,2), byrow = T)
?matrix
?as.array
?as.matrix
testarray <- array(testprobs, c(3,3,2))
testarray
testarray2 <- aperm(testarray, perm = c(2,1,3))
testarray2
mdp_check_square_stochastic(testarray2)
?mdp_check_square_stochastic
rowSums(testarray2)
testarray[,,1]
rowSums(testarray2[,,1])
mdp_check_square_stochastic(testarray2[,,1])
mdp_check_square_stochastic(testarray2[,,2])
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
source('C:/Users/Laura Cooper/Downloads/WorkSpaceConnector.R')
?dev.copy
?postscript
?dev.copy2eps
require(pwr)
require(psych)
require(RColorBrewer)
require(plotrix)
require(rmcorr)
require(lme4)
require(AICcmodavg)
require(ggplot2)
require(merTools)
addalpha <- function(colors, alpha=1.0) {
r <- col2rgb(colors, alpha=T)
# Apply alpha
r[4,] <- alpha*255
r <- r/255.0
return(rgb(r[1,], r[2,], r[3,], r[4,]))
}
# colorRampPaletteAlpha()
colorRampPaletteAlpha <- function(colors, n=32, interpolate='linear') {
# Create the color ramp normally
cr <- colorRampPalette(colors, interpolate=interpolate)(n)
# Find the alpha channel
a <- col2rgb(colors, alpha=T)[4,]
# Interpolate
if (interpolate=='linear') {
l <- approx(a, n=n)
} else {
l <- spline(a, n=n)
}
l$y[l$y > 255] <- 255 # Clamp if spline is > 255
cr <- addalpha(cr, l$y/255.0)
return(cr)
}
set.seed(1)
initX <- rnorm(50)
newY <- NULL
newX <- NULL
sub <- rep(1:10, each = 5)
rsq <- .9
addx <- -2
for (i in 1:10){
addx <- addx + .25
tempData <- initX[sub == i] + addx
sdx <- sd(tempData)
sdnoise <- sdx * (sqrt((1-rsq)/rsq))
tempy <- tempData + rnorm(5,0,sdnoise) + rnorm(1,0,3)
newY <- c(newY, tempy)
newX <- c(newX,tempData)
}
exampleMat <-data.frame(cbind(sub,newX,newY))
example.rmc <- rmcorr(sub,newX,newY,exampleMat)
###standard averaged regression plot
submeanx <- aggregate(exampleMat$newX, by = list(exampleMat$sub), mean)
submeany <- aggregate(exampleMat$newY, by = list(exampleMat$sub), mean)
mypal <- colorRampPalette(RColorBrewer::brewer.pal(10,'Paired'))
cols <- mypal(10)
par(mfrow = c(1, 2), mgp = c(2.5, .75, 0), mar = c(4,4,2,1), cex = 1.2)
plot(example.rmc, exampleMat, xlab = "x", ylab = "y",
overall = F, palette = mypal, las = 1, ylim = c(-6, 6.5))
text(1,-5,paste('rmcorr =', round(example.rmc$r,2),'\np < 0.001'), adj = 1)
plot(submeanx[,2], submeany[,2], pch = 16, col = cols, las = 1,
xlab = "x (averaged for each participant)",
ylab = "y (averaged for each participant)", ylim=c(-6,6.5), xlim=c(-3, 1))
stdr <- cor.test(submeanx[,2], submeany[,2])
text(1,-5,paste('r =', round(stdr$est,2),'\np =', round(stdr$p.value,2)), adj = 1)
abline(lm(submeany[,2]~submeanx[,2]),col="gray50")
dev.copy2eps(file="plots/Figure1_Rmcorr_vs_reg.eps")
dev.off()
par(mfrow = c(3,3), mar = c(1,1,.5,.5), mgp = c(2.5,.75,0),
oma = c(4,4,4,0), cex = 1.1)
makeminiplot <- function(subxs, sub.slope, intercept, constant=0, xax = "n",
yax = "n", legend = F){
mypal <- colorRampPalette(RColorBrewer::brewer.pal(10,'Paired'))
cols <- mypal(3)
# cols <- c("#A6CEE3", "#9D686D", "#6A3D9A")
subys <- list(3)
for (i in 1:3){
subys[[i]] <- subxs[[i]] * sub.slope + intercept*i + constant
}
plot(subxs[[1]],subys[[1]], type = "n", xlim =c(0,4), ylim = c(0,10),
xlab = "", ylab = "", xaxt = xax, yaxt = yax, las = 1)
allx <- unlist(subxs)
ally <- unlist(subys)
abline(lm(ally~allx))
for (i in 1:3) {
lines(subxs[[i]],subys[[i]], type = "o", col = cols[i], pch = 16)
}
if (legend) legend('bottomright', legend = "OLS", lwd = 1.25, bty = "n",
cex = 1.05, inset = .01)
}
subxs <- list(3)
subxs[[1]] <- seq(0,2,.25)
subxs[[2]] <- seq(1,3,.25)
subxs[[3]] <- seq(2,4,.25)
#ols is positive
makeminiplot(subxs, -1, 4, yax = "s", legend = T)
makeminiplot(subxs, 0, 2.75)
makeminiplot(subxs, 1, 1.5)
#ols is flat
makeminiplot(subxs, -1.5, 2.45, 3, yax = "s")
makeminiplot(subxs, 0, 0, 5)
makeminiplot(subxs, 1.5, -2.4, 7)
#ols is negative
makeminiplot(subxs, -.75, -2, 10, yax = "s", xax = "s")
makeminiplot(subxs, 0, -3.1, 10.9, xax = "s")
makeminiplot(subxs, .9, -4.6, 12, xax = "s")
mtext(side = 1, outer = T, line = 1.5, "x", at = c(.175, .5, .85))
mtext(side = 2, outer = T, line = 1.5, "y", at = c(.175, .5, .85), las = 1)
# mtext(side = 3, outer = T, line = .5,
#       c("a) rmcorr = -1", "b) rmcorr = 0", "c) rmcorr = 1"),
#       at = c(.175, .5, .85), las = 1, cex = 1.5)
dev.copy2eps(pdf, file="plots/Figure2_Rmcorr_vs_OLS.eps")
library(rmcorr)
load("~/RStudio Projects/danielRmcorr/Study1Long.Rdata")
rmcorr(participant = Subject, measure1 = Hydrogen, measure2 = VAS, dataset = Study1Long)
library(rmcorr)
rmcorr(participant = Subject, measure1 = Hydrogen, measure2 = VAS, dataset = Study1Long)
a <- rmcorr(participant = Subject, measure1 = Hydrogen, measure2 = VAS, dataset = Study1Long)
plot(a)
?plot.rmc
plot(a, Study1Long)
library(rmcorr)
a <- rmcorr(participant = Subject, measure1 = Hydrogen, measure2 = VAS, dataset = Study1Long)
plot(a, Study1Long)
a
?mnormt
?mnormt
?mnormt
library(rmcorr)
library(rmcorr)
devtools::use_travis()
devtools::build_win()
?revdep_check
devtools::revdep_check()
readRDS("revdep/checks.rds")
devtools::revdep_check_print_problems()
install.packages('roxygen2')
library(roxygen2)
install.packages('devtools')
install.packages('pwr')
install.packages('psych')
install.packages('RColorBrewer')
library(rmcorr)
install.packages('knitr')
install.packages('plotrix')
install.packages('rmarkdown')
devtools::release()
devtools::document()
?print.rmc
?print.lm
?lm
?summary.lm
library(rmcorr)
?print.rmc
library(rmcorr)
library(rmcorr)
library(rmcorr)
devtools::document()
install.packages('lmer')
install.packages('lme4')
install.packages('AICcmodavg')
install.packages('merTools')
install.packages('ggplot2')
install.packages('tibble')
library(rmcorr)
library(rmcorr)
library(rmcorr)
library(rmcorr)
library(rmcorr)
library(rmcorr)
library(rmcorr)
build_vignettes()
library(knitr)
build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(rmcorr)
devtools::build_vignettes()
library(rmcorr)
?evidence
remove.packages('AICcmodavg')
install.packages('AICcmodavg')
install.packages('AICcmodavg')
library(rmcorr)
library(rmcorr)
devtools::revdep_check()
readRDS("revdep/checks.rds")
devtools::revdep_check_print_problems()
?revdep
devtools::revdep_check_save_summary()
devtools::release()
devtools::release()
library(rmcorr)
blandrmc <- rmcorr(Subject, PacO2, pH, bland1995)
blandrmc
plot(blandrmc)
library(rmcorr)
datasetname <- data.frame(Subject = rep(c("a","b","c","d","e"), times = 2), a = rnorm(10), b = rnorm(10), c = rnorm(10))
datasetname
beh <- c("a", "b")
for(i in beh){
assign(paste('rmc', task, 'c.out')) <- rmcorr(Subject, get(i), c, datasetname)
}
beh
for (i in beh){assign(paste('rmc',i','c.out', sep = "_"), rmcorr(Subject, get(i), c, datasetname))}
for (i in beh){assign(paste('rmc',i,'c.out', sep = "_"), rmcorr(Subject, get(i), c, datasetname))}
rmc_a_c.out
rmc_b_c.out
plot(rmc_a_c.out)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
datasetname
debug(rmcorr)
source('~/.active-rstudio-document')
Participant
Measure1
Measure2
args
class(args)
class(args$measure1)
class(args$measure2)
class(args$participant)
Participant
Measure1
Measure2
beh
i <- "a"
i
class(i)
get(i)
i
a
undebug(rmcorr)
source('~/.active-rstudio-document')
datasetname <- data.frame(Subject = rep(c("a","b","c","d","e"), times = 2), a = rnorm(10), b = rnorm(10), c = rnorm(10))
source('~/.active-rstudio-document')
debug(rmcorr)
source('~/.active-rstudio-document')
args
class(args$participant)
class(args$measure1)
class(args$measure2)
rmcorr(Subject, PacO2, pH, bland1995)
args
class(args$measure1)
eval(args$emasure1, dataset)
args$measure1
eval(args$measure1, dataset)
source('~/.active-rstudio-document')
args
eval(args$measure1, dataset)
args$measure1
deparse(a)
deparse(nonsense)
deparse(substitute(nonsense))
library(rmcorr)
library(devtools)
devtools::document()
library(rmcorr)
library(rmcorr)
library(rmcorr)
?rmcorr
rmcorr(Subject, PacO2, pH, bland1995)
rmcorr("Subject", PacO2, pH, bland1995)
rmcorr("Subject", bland1995$PacO2, pH, bland1995)
a <- "pH"
rmcorr("Subject", bland1995$PacO2, a, bland1995)
testrmc <- rmcorr("Subject", bland1995$PacO2, a, bland1995)
plot(testrmc)
library(rmcorr)
?plot.rmc
?rmcorr
?lm
?rmcorr
example(plot.rmc)
library(rmcorr)
example(plot.rmc)
library(rmcorr)
example(plot.rmc)
library(ggplot2)
example(plot.rmc)
library(rmcorr)
library(ggplot2)
example(plot.rmc)
library(rmcorr)
library(ggplot2)
example(plot.rmc)
library(rmcorr)
library(ggplot2)
example(plot.rmc)
library(rmcorr)
library(ggplot2)
example(plot.rmc)
bland1995
bland1995$pH
max(bland1995$pH)
?plot.rmc
?lm
?metafor
?aov
?glm
library(rmcorr)
library(ggplot2)
example(plot.rmcv)
example(plot.rmc)
library(rmcorr)
library(ggplot2)
example(plot.rmc)
?plot.rmc
library(rmcorr)
?plot.rmc
library(rmcorr)
?plot.rmc
my.rmc <- rmcorr(bland1995$Subject, bland1995$PacO2, pH, dataset = bland199)
my.rmc <- rmcorr(bland1995$Subject, bland1995$PacO2, pH, dataset = bland1995)
plot(my.rmc)
plot(my.rmc)
plot(my.rmc)
